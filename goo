import dash
from dash import Dash, dcc, html, dash_table, Input, Output
import pandas as pd

# Sample data
data = {
    'tenure': [0] * 13 + [1] * 13,
    'margin': [-20, -15, -10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40] * 2,
    'CCY': ['USD', 'USD', 'USD', 'USD', 'EUR', 'EUR', 'USD', 'EUR', 'USD', 'USD', 'USD', 'USD', 'USD'] * 2,
    'notional': [200, 200, 200, 200, 100, 300, 400, 500, 600, 600, 600, 600, 600] * 2
}
df = pd.DataFrame(data)

# Initialize the Dash app
app = Dash(__name__)

# Define the summary DataFrame
def create_summary(selected_tenure=None):
    summary = df.groupby('tenure').agg({'notional': 'sum'}).reset_index()
    summary.columns = ['Tenure', 'Grand Total']
    summary['Range1'] = '<-10'
    summary['Range2'] = '30+'
    for ccy in ['EUR', 'USD']:
        summary[ccy] = df[df['CCY'] == ccy].groupby('tenure')['notional'].sum().reset_index(drop=True)

    if selected_tenure is not None:
        # For the selected tenure, show detailed ranges
        detail = df[df['tenure'] == selected_tenure]
        detail['Range1'] = detail['margin'].apply(lambda x: '<-10' if x < -10 else x - 5)
        detail['Range2'] = detail['margin'].apply(lambda x: '30+' if x >= 30 else x)
        detail_grouped = detail.groupby(['Range1', 'Range2', 'CCY']).agg({'notional': 'sum'}).reset_index()
        detail_pivot = detail_grouped.pivot(index=['Range1', 'Range2'], columns='CCY', values='notional').fillna(0)
        detail_pivot['Grand Total'] = detail_pivot.sum(axis=1)
        detail_pivot.reset_index(inplace=True)
        detail_pivot.insert(0, 'Tenure', selected_tenure)
        # Replace the summary row for the selected tenure with the detailed rows
        summary = pd.concat([summary[summary['Tenure'] != selected_tenure], detail_pivot])

    return summary.sort_values(by='Tenure')

summary_df = create_summary()

# Set up the Dash DataTable
app.layout = html.Div([
    dash_table.DataTable(
        id='table',
        columns=[{"name": i, "id": i} for i in summary_df.columns],
        data=summary_df.to_dict('records'),
        style_table={'overflowX': 'auto'},
        style_data_conditional=[
            {'if': {'column_id': 'Tenure'}, 'cursor': 'pointer'}
        ]
    )
])

# Store the currently expanded tenure in a hidden div for persistence
app.layout = html.Div([
    app.layout,
    html.Div(id='expanded-tenure', style={'display': 'none'})
])

# Callback for updating the table
@app.callback(
    [Output('table', 'data'), Output('expanded-tenure', 'children')],
    [Input('table', 'active_cell'), Input('expanded-tenure', 'children')],
    [State('table', 'data')]
)
def update_table(active_cell, expanded_tenure, rows):
    ctx = dash.callback_context
    if not ctx.triggered:
        trigger_id = 'No clicks yet'
    else:
        trigger_id = ctx.triggered[0]['prop_id'].split('.')[0]

    if trigger_id == 'table':
        if active_cell:
            selected_tenure = rows[active_cell['row']]['Tenure']
            # Toggle the expansion of the selected tenure
            if selected_tenure == expanded_tenure:
                new_rows = create_summary().to_dict('records')
                return new_rows, None
            else:
                new_rows = create_summary(selected_tenure).to_dict('records')
                return new_rows, selected_tenure
    return rows, expanded_tenure

if __name__ == '__main__':
    app.run_server(debug=True)